// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestApi.Models
{
    public partial class KRU_MIS_Context : DbContext
    {
        public KRU_MIS_Context()
        {
        }

        public KRU_MIS_Context(DbContextOptions<KRU_MIS_Context> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
       => optionsBuilder.UseSqlServer("Data Source=43.229.149.77,1443;Initial Catalog=KRU_MIS;User ID=sa;Password=hc-kan#3.31.2566");


        public virtual DbSet<Certificate> Certificate { get; set; }
        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<Registration> Registration { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Certificate>(entity =>
            {
                entity.ToTable("certificate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CertificateCode)
                    .HasMaxLength(25)
                    .HasColumnName("certificate_code");

                entity.Property(e => e.CertificateDate)
                    .HasColumnType("date")
                    .HasColumnName("certificate_date");

                entity.Property(e => e.SignName)
                    .HasMaxLength(50)
                    .HasColumnName("sign_name");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .IsFixedLength();

                entity.Property(e => e.UserCode)
                    .HasMaxLength(8)
                    .HasColumnName("user_code");


                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(6)
                    .HasColumnName("project_code");

            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("project");

                entity.Property(e => e.Code)
                .HasMaxLength (6)
                .HasColumnName("code");


                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date");

                entity.Property(e => e.Detail)
                    .HasColumnType("text")
                    .HasColumnName("detail");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(50)
                    .HasColumnName("project_name");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Registration>(entity =>
            {
                entity.ToTable("registration");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InitialCode).HasColumnName("initial_code");

                entity.Property(e => e.JoinStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("join_status")
                    .IsFixedLength();

                entity.Property(e => e.Lastname)
                    .HasMaxLength(80)
                    .HasColumnName("lastname");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.ProjectCode).HasColumnName("project_code");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}